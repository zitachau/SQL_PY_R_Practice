*****************

All credits here goes to Jose Portilla on Udemy
https://www.pieriandata.com/
https://www.linkedin.com/in/jmportilla/

*****************

# Just a student who loves to learn

# Here were trying to find the customer's first/last name 'Maria Miller' and email from 
# the customers table. 

# We didn't know if the table had the columns for that in the database. 
# Let's find out!
SELECT * FROM customer;

# It's there. So, let's get her email
SELECT first_name, last_name, email FROM customer
WHERE first_name = 'Maria' AND last_name = 'Miller';



# Let's retrieve unique rating types our films could have in our database
SELECT * FROM film;
SELECT DISTINCT (rating) FROM film;

# A customer is late on their movie return, and we've mailed them a letter to their
# address at '259 Ipoh Drive'. Let's call them
SELECT phone FROM address
WHERE address = '259 Ipoh Drive';


# What are the titles of the 5 shortest (in length of runtime) movies?
SELECT title, length FROM film
ORDER BY length ASC
LIMIT 5;


# If a customer wants to watch a movie that's 50 minutes or less in runtime,
# how many options does she have?
SELECT COUNT (*) FROM film
WHERE length <= '50';

# 37!


# Let's see how many films have a rating of R and a replacement cost
# between $5 andd $15
SELECT COUNT (*) FROM film
WHERE rating = 'R' AND replacement_cost
BETWEEN 5 AND 15; # 52!


# What about the names of the films that have the word Truman somewhere in the title?
SELECT title FROM film
WHERE title LIKE '%Truman%';


# We're going to reward our top 5 spending customers with a $50 visa card
# Let's find their ids
SELECT customer_id, SUM(amount)
FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5;



# What are the customer ids of the customers who have spent more than $100
# in payment transactions with our staff_id member 2?
SELECT customer_id, SUM(amount)
FROM payment
WHERE staff_id != 1
GROUP BY customer_id
HAVING SUM(amount) > 100;


****************
Here we're going to use joins
****************

# Someone hacked our system and is charging customers in Florida way more than expected.
# We must notify/refund all of customers who live in Florida
SELECT first_name, last_name, email
FROM customer
INNER JOIN address
ON customer.address_id = address.address_id
WHERE district = 'Florida';



# A customer came in and was explaining how great the actor "Jennifer Davis" was.
# He wants to know what other movie shes in
SELECT title, first_name, last_name
FROM film_actor
INNER JOIN actor
ON film_actor.actor_id = actor.actor_id
INNER JOIN film
ON film_actor.film_id = film.film_id
WHERE first_name = 'Jennifer' and last_name = 'Davis';


**********
Timestamps
**********

# Let's find unique payment date in months
SELECT DISTINCT TO_CHAR(payment_date,'Month')
FROM payment;



# What about the most transactions that occurred on a Tuesday?
SELECT COUNT (*) FROM payment
WHERE EXTRACT(DOW FROM payment_date) = 1;




**************
Using new database
**************



# Lets make a list of the start times for bookings on the tennis courts on 2012-09-21
SELECT cd.bookings.starttime, cd.facilities.name
FROM cd.bookings
INNER JOIN cd.facilities
ON cd.bookings.facid = cd.facilities.facid
WHERE cd.facilities.name LIKE 'Tennis%'
AND cd.bookings.starttime BETWEEN '2012-09-21' and '2012-09-22'
ORDER BY cd.bookings.starttime;



# Lets find a list of the start times for bookings by members named 'Tracy Smith'
SELECT COUNT (*)
FROM cd.members
INNER JOIN cd.bookings
ON cd.members.memid = cd.bookings.memid
WHERE cd.members.surname = 'Smith'
AND cd.members.firstname = 'Tracy'



***************
Creating new database/table and inserting information
***************

# Let's create a students table
CREATE TABLE students(
	student_id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	homeroom_number INTEGER,
	phone VARCHAR(50) UNIQUE NOT NULL,
	email VARCHAR(250) UNIQUE,
	grad_year INTEGER);



# Let's create another table called teachers
CREATE TABLE teachers(
  teacher_id SERIAL PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  homeroom_number INTEGER,
  department VARCHAR(50),
  email VARCHAR(250) UNIQUE,
  phone VARCHAR(50) UNIQUE NOT NULL);


# Now, let's insert some information to the students table
INSERT INTO students(first_name,last_name,phone,grad_year,homeroom_number)
VALUES('Zita','Chau','777-555-1234',2021,5);


# Let's also insert some information to the teachers table
INSERT INTO teachers(first_name,last_name,homeroom_number,department,email,phone)
VALUES('Daisy','Green',5,'Biology','dgreen@school.org','777-555-4321');


# Let's select the customer_id column, insert new terms and name the new column customer_class
SELECT customer_id,
CASE
	WHEN(customer_id <= 100) then 'Premium'
	WHEN(customer_id between 100 and 200) then 'Plus'
	ELSE 'Normal'
END AS customer_class
FROM customer;


# Let's now do a raffle. Customer_id 2 would be the winner and 3 would be second place. All 
# customers are normal
SELECT customer_id,
CASE customer_id
	WHEN 2 then 'Winner'
	WHEN 5 then 'Second Place'
	ELSE 'Normal'
END AS raffle_results
FROM customer;


# Let's count how many rental rate are bargains, regular, and premium
SELECT
SUM(CASE rental_rate 
	WHEN 0.99 then 1
	ELSE 0
END) AS bargains,
SUM(CASE rental_rate
   	WHEN 2.99 then 1
   ELSE 0
END) AS regular,
SUM(CASE rental_rate
   	WHEN 4.99 then 1
   ELSE 0
END) AS premium
FROM film;





# Does not return null values
SELECT item,(price - COALESCE(discount,0))
AS final
FROM table;



# Checking what the character length is for inventory id
SELECT CHAR_LENGTH (cast(inventory_id as VARCHAR))
FROM rental;



# Finding the ratio of department A and B
SELECT (
SUM(CASE WHEN department = 'A' then 1 ELSE 0 END)/
	NULLIF(SUM(CASE WHEN department = 'B' then 1 ELSE 0 END),0)
) AS department_ratio
FROM depts;




# Creating a view for customer table
CREATE VIEW customer_info AS
SELECT first_name,last_name,address
FROM customer
INNER JOIN address
ON customer.address_id = address.address_id;

# Creating/replacing view
CREATE OR REPLACE VIEW customer_info AS
SELECT first_name,last_name,address,district FROM customer
INNER JOIN address
ON customer.address_id = address.address_id;


# Deleting view
DROP VIEW IF EXISTS customer_info
ALTER VIEW customer_info RENAME TO c_info;



# Connecting postgresql to python
# Secret = 'password'
import psycopg2 as pg2
conn = pg2.connect(database='dvdrental',user='postgres',password='Secret')

cur = conn.cursor()
cur.execute('SELECT * FROM payment')
data = cur.fetchone()

conn.close()
